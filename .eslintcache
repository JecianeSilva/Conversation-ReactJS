[{"/home/daniel/Documents/Projetos/Conversation-ReactJS/src/index.js":"1","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/App.js":"2","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/routes.js":"3","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/pages/Chat/index.js":"4","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/component/Talk/index.js":"5","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/component/TalkList/index.js":"6","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/component/TalkListItem/index.js":"7","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/component/Messenger/index.js":"8","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/messages.js":"9"},{"size":197,"mtime":1608650724861,"results":"10","hashOfConfig":"11"},{"size":164,"mtime":1608650724861,"results":"12","hashOfConfig":"11"},{"size":288,"mtime":1608650724861,"results":"13","hashOfConfig":"11"},{"size":1630,"mtime":1608665137561,"results":"14","hashOfConfig":"11"},{"size":2502,"mtime":1608695096155,"results":"15","hashOfConfig":"11"},{"size":1611,"mtime":1608687445028,"results":"16","hashOfConfig":"11"},{"size":465,"mtime":1608687314539,"results":"17","hashOfConfig":"11"},{"size":373,"mtime":1608651126147,"results":"18","hashOfConfig":"11"},{"size":4759,"mtime":1608687430032,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1nop9a3",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/daniel/Documents/Projetos/Conversation-ReactJS/src/index.js",[],["42","43"],"/home/daniel/Documents/Projetos/Conversation-ReactJS/src/App.js",[],"/home/daniel/Documents/Projetos/Conversation-ReactJS/src/routes.js",[],"/home/daniel/Documents/Projetos/Conversation-ReactJS/src/pages/Chat/index.js",[],"/home/daniel/Documents/Projetos/Conversation-ReactJS/src/component/Talk/index.js",["44"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Messenger from '../Messenger';\nimport img from '../../assets/default-user-image.png'\n\nimport './styles.css';\n\nexport default function Talk({newMessage,chatSelected, messages, name}) {\n    const [messageInput, setMessageInput] = useState(\"\");\n    return (\n        <div className=\"containerTalk\" id=\"containerTalk\">\n            <div className=\"containerHeader\">\n                <div id=\"block\">\n                    <img src={img} alt=\"image profile\" />\n                </div>\n                <p className=\"headerText\">{name}</p>\n            </div>\n            <div className=\"containerConversation\">\n            {messages.length>0&&<Link className=\"showConversation\" to=\"#\">Show Previous Message!</Link>}\n                <div className=\"containerMessenger\">\n                    {\n                    \n                    messages.length>0&&messages.map((item, i) => (\n                        <Messenger\n                            key={i}\n                            type={item.type}\n                            text={item.text}\n                            hours={item.hours}\n                        >\n                        </Messenger>\n                    ))\n                    }\n                    {!(messages.length>0)&& \n                        <div className=\"conversationBackground\">\n                            <img src=\"https://soulphia.com/wp-content/uploads/2020/09/Asset-2.png\"  alt=\"logo\"/>\n                       </div>\n                    }\n                    \n                    \n                </div>\n            </div>  \n            <div className=\"sendMessage\">\n                    <input \n                    type=\"text\"\n                    value={messageInput}\n                    onChange={e => setMessageInput(e.target.value)\n                    \n                    }\n                    onKeyDown={event =>{\n                        if (event.key === 'Enter' && chatSelected !== -1 && messageInput !== '') {\n                            newMessage(messageInput, chatSelected);\n                            setMessageInput('');\n                            let containerConv = document.getElementsByClassName('containerConversation');\n                            console.log(containerConv[0].scrollTop += 100);\n                        }\n                    }}\n                    >                        \n                    </input>\n             </div>          \n        </div>\n    )\n}\n","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/component/TalkList/index.js",["45"],"import React, { useState } from 'react';\n\nimport TalkListItem from '../TalkListItem/index';\n\nimport img from '../../assets/default-user-image.png'\n\nimport './styles.css';\n\nexport default function TalkList({updateChatSelected, chats}) {    \n    const [chatsFiltered, setChatsFiltered] = useState(chats);\n\n    function updateChat(id){\n        updateChatSelected(id);\n    }\n\n    return (\n        <div className=\"containerList\" id=\"containerList\">\n            <div className=\"containerHeader\">\n                <div id=\"block\">\n                    <img src={img} alt=\"image profile\" />\n                </div>\n            </div>\n            <div className=\"containerSearch\">\n                <input \n                className=\"inputSearch\"\n                type=\"text\"\n                onChange={e =>{\n                    setChatsFiltered(chats.filter(item => item.name.toLowerCase().includes(e.target.value.toLowerCase())))\n                }\n                }\n                ></input>\n            </div>\n            <div className=\"itens\">\n            {\n                chatsFiltered.map((item, i)=>(\n                <div className=\"containerListItemButton\" key={item.id} onClick={e => updateChatSelected(item.id)}>    \n                <TalkListItem\n                    id={item.id}\n                    name= {item.name}\n                    hour= {item.hour}\n                    image={item.image}  \n                    updateChat={updateChat}\n                ></TalkListItem>\n                <hr></hr>\n                </div>\n                )\n                )\n            }\n            </div>\n        </div>\n    )\n}\n","/home/daniel/Documents/Projetos/Conversation-ReactJS/src/component/TalkListItem/index.js",[],"/home/daniel/Documents/Projetos/Conversation-ReactJS/src/component/Messenger/index.js",[],["46","47"],"/home/daniel/Documents/Projetos/Conversation-ReactJS/src/messages.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":15,"column":21,"nodeType":"54","endLine":15,"endColumn":58},{"ruleId":"52","severity":1,"message":"53","line":20,"column":21,"nodeType":"54","endLine":20,"endColumn":58},{"ruleId":"48","replacedBy":"55"},{"ruleId":"50","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["57"],["58"],"no-global-assign","no-unsafe-negation"]